---
## Global Offline settings
### Private Container Image Registry
registry_host: "registry.cn-beijing.aliyuncs.com"
# files_repo: "http://myprivatehttpd"
### If using CentOS, RedHat, AlmaLinux or Fedora
# yum_repo: "http://myinternalyumrepo"
### If using Debian
# debian_repo: "http://myinternaldebianrepo"
### If using Ubuntu
# ubuntu_repo: "http://myinternalubunturepo"

## Container Registry overrides
kube_image_repo: "{{ registry_host }}/llaoj"
# gcr_image_repo: "{{ registry_host }}"
# github_image_repo: "{{ registry_host }}"
# docker_image_repo: "{{ registry_host }}"
# quay_image_repo: "{{ registry_host }}"

netcheck_server_image_repo: "{{ kube_image_repo }}/mirantis_k8s-netchecker-server"
netcheck_agent_image_repo: "{{ kube_image_repo }}/mirantis_k8s-netchecker-agent"
etcd_image_repo: "{{ kube_image_repo }}/coreos_etcd"
cilium_image_repo: "{{ kube_image_repo }}/cilium_cilium"
cilium_init_image_repo: "{{ kube_image_repo }}/cilium_cilium-init"
cilium_operator_image_repo: "{{ kube_image_repo }}/cilium_operator"
multus_image_repo: "{{ kube_image_repo }}/k8snetworkplumbingwg_multus-cni"
flannel_image_repo: "{{ kube_image_repo }}/coreos_flannel"
calico_node_image_repo: "{{ kube_image_repo }}/calico_node"
calico_cni_image_repo: "{{ kube_image_repo }}/calico_cni"
calico_flexvol_image_repo: "{{ kube_image_repo }}/calico_pod2daemon-flexvol"
calico_policy_image_repo: "{{ kube_image_repo }}/calico_kube-controllers"
calico_typha_image_repo: "{{ kube_image_repo }}/calico_typha"
weave_kube_image_repo: "{{ kube_image_repo }}/weaveworks_weave-kube"
weave_npc_image_repo: "{{ kube_image_repo }}/weaveworks_weave-npc"
kube_ovn_container_image_repo: "{{ kube_image_repo }}/kubeovn_kube-ovn"
kube_router_image_repo: "{{ kube_image_repo }}/cloudnativelabs_kube-router"
pod_infra_image_repo: "{{ kube_image_repo }}/pause"
install_socat_image_repo: "{{ kube_image_repo }}/xueshanf_install-socat"
nginx_image_repo: "{{ kube_image_repo }}/library_nginx"
haproxy_image_repo: "{{ kube_image_repo }}/library_haproxy"
coredns_image_repo: "{{ kube_image_repo }}/coredns_coredns"
nodelocaldns_image_repo: "{{ kube_image_repo }}/dns_k8s-dns-node-cache"
dnsautoscaler_image_repo: "{{ kube_image_repo }}/cpa_cluster-proportional-autoscaler-amd64"
registry_image_repo: "{{ kube_image_repo }}/library_registry"
metrics_server_image_repo: "{{ kube_image_repo }}/metrics-server_metrics-server"
addon_resizer_image_repo: "{{ kube_image_repo }}/addon-resizer"
local_volume_provisioner_image_repo: "{{ kube_image_repo }}/sig-storage_local-volume-provisioner"
cephfs_provisioner_image_repo: "{{ kube_image_repo }}/external_storage_cephfs-provisioner"
rbd_provisioner_image_repo: "{{ kube_image_repo }}/external_storage_rbd-provisioner"
local_path_provisioner_image_repo: "{{ kube_image_repo }}/rancher_local-path-provisioner"
ingress_nginx_controller_image_repo: "{{ kube_image_repo }}/ingress-nginx_controller"
alb_ingress_image_repo: "{{ kube_image_repo }}/amazon_aws-alb-ingress-controller"
cert_manager_controller_image_repo: "{{ kube_image_repo }}/jetstack_cert-manager-controller"
cert_manager_cainjector_image_repo: "{{ kube_image_repo }}/jetstack_cert-manager-cainjector"
cert_manager_webhook_image_repo: "{{ kube_image_repo }}/jetstack_cert-manager-webhook"
csi_attacher_image_repo: "{{ kube_image_repo }}/sig-storage_csi-attacher"
csi_provisioner_image_repo: "{{ kube_image_repo }}/sig-storage_csi-provisioner"
csi_snapshotter_image_repo: "{{ kube_image_repo }}/sig-storage_csi-snapshotter"
snapshot_controller_image_repo: "{{ kube_image_repo }}/sig-storage_snapshot-controller"
csi_resizer_image_repo: "{{ kube_image_repo }}/sig-storage_csi-resizer"
csi_node_driver_registrar_image_repo: "{{ kube_image_repo }}/sig-storage_csi-node-driver-registrar"
cinder_csi_plugin_image_repo: "{{ kube_image_repo }}/k8scloudprovider_cinder-csi-plugin"
aws_ebs_csi_plugin_image_repo: "{{ kube_image_repo }}/amazon_aws-ebs-csi-driver"
dashboard_image_repo: "{{ kube_image_repo }}/kubernetesui_dashboard-amd64"
dashboard_metrics_scraper_repo: "{{ kube_image_repo }}/kubernetesui_metrics-scraper"
metallb_speaker_image_repo: 

"{{ kube_image_repo }}/kube-apiserver"
"{{ kube_image_repo }}/kube-controller-manager"
"{{ kube_image_repo }}/kube-scheduler"
"{{ kube_image_repo }}/kube-proxy"

## Kubernetes components
# kubeadm_download_url: "{{ files_repo }}/kubernetes/{{ kube_version }}/kubeadm"
# kubectl_download_url: "{{ files_repo }}/kubernetes/{{ kube_version }}/kubectl"
# kubelet_download_url: "{{ files_repo }}/kubernetes/{{ kube_version }}/kubelet"

## CNI Plugins
# cni_download_url: "{{ files_repo }}/kubernetes/cni/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz"

## cri-tools
# crictl_download_url: "{{ files_repo }}/kubernetes/cri-tools/crictl-{{ crictl_version }}-{{ ansible_system | lower }}-{{ image_arch }}.tar.gz"

## [Optional] etcd: only if you **DON'T** use etcd_deployment=host
# etcd_download_url: "{{ files_repo }}/kubernetes/etcd/etcd-{{ etcd_version }}-linux-amd64.tar.gz"

# [Optional] Calico: If using Calico network plugin
# calicoctl_download_url: "{{ files_repo }}/kubernetes/calico/{{ calico_ctl_version }}/calicoctl-linux-{{ image_arch }}"
# [Optional] Calico with kdd: If using Calico network plugin with kdd datastore
# calico_crds_download_url: "{{ files_repo }}/kubernetes/calico/{{ calico_version }}.tar.gz"

# [Optional] Flannel: If using Falnnel network plugin
# flannel_cni_download_url: "{{ files_repo }}/kubernetes/flannel/{{ flannel_cni_version }}/flannel-{{ image_arch }}"

# [Optional] helm: only if you set helm_enabled: true
# helm_download_url: "{{ files_repo }}/helm-{{ helm_version }}-linux-{{ image_arch }}.tar.gz"

# [Optional] crun: only if you set crun_enabled: true
# crun_download_url: "{{ files_repo }}/containers/crun/releases/download/{{ crun_version }}/crun-{{ crun_version }}-linux-{{ image_arch }}"

# [Optional] kata: only if you set kata_containers_enabled: true
# kata_containers_download_url: "{{ files_repo }}/kata-containers/runtime/releases/download/{{ kata_containers_version }}/kata-static-{{ kata_containers_version }}-{{ ansible_architecture }}.tar.xz"

# [Optional] cri-o: only if you set container_manager: crio
# crio_download_base: "download.opensuse.org/repositories/devel:kubic:libcontainers:stable"
# crio_download_crio: "http://{{ crio_download_base }}:/cri-o:/"

# [Optional] runc,containerd: only if you set container_runtime: containerd
# runc_download_url: "{{ files_repo }}/{{ runc_version }}/runc.{{ image_arch }}"
# containerd_download_url: "{{ files_repo }}/containerd/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz"
# nerdctl_download_url: "{{ files_repo }}/nerdctl/v{{ nerdctl_version }}/nerdctl-{{ nerdctl_version }}-{{ ansible_system | lower }}-{{ image_arch }}.tar.gz"

## CentOS/Redhat/AlmaLinux
### For EL7, base and extras repo must be available, for EL8, baseos and appstream
### By default we enable those repo automatically
# rhel_enable_repos: false
### Docker / Containerd
# docker_rh_repo_base_url: "{{ yum_repo }}/docker-ce/$releasever/$basearch"
# docker_rh_repo_gpgkey: "{{ yum_repo }}/docker-ce/gpg"

## Fedora
### Docker
# docker_fedora_repo_base_url: "{{ yum_repo }}/docker-ce/{{ ansible_distribution_major_version }}/{{ ansible_architecture }}"
# docker_fedora_repo_gpgkey: "{{ yum_repo }}/docker-ce/gpg"
### Containerd
# containerd_fedora_repo_base_url: "{{ yum_repo }}/containerd"
# containerd_fedora_repo_gpgkey: "{{ yum_repo }}/docker-ce/gpg"

## Debian
### Docker
# docker_debian_repo_base_url: "{{ debian_repo }}/docker-ce"
# docker_debian_repo_gpgkey: "{{ debian_repo }}/docker-ce/gpg"
### Containerd
# containerd_debian_repo_base_url: "{{ ubuntu_repo }}/containerd"
# containerd_debian_repo_gpgkey: "{{ ubuntu_repo }}/containerd/gpg"
# containerd_debian_repo_repokey: 'YOURREPOKEY'

## Ubuntu
### Docker
# docker_ubuntu_repo_base_url: "{{ ubuntu_repo }}/docker-ce"
# docker_ubuntu_repo_gpgkey: "{{ ubuntu_repo }}/docker-ce/gpg"
### Containerd
# containerd_ubuntu_repo_base_url: "{{ ubuntu_repo }}/containerd"
# containerd_ubuntu_repo_gpgkey: "{{ ubuntu_repo }}/containerd/gpg"
# containerd_ubuntu_repo_repokey: 'YOURREPOKEY'
